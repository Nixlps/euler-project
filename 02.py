'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
Given a natural number num, create a algorithm that find the sum of the even-valued terms in the Fibonacci sequence whose values are below num.

Link: https://projecteuler.net/problem=2
'''

def sumOfEvenFib(num):
    result = 2
    curr = 2
    prev = 1
    while curr < num:
        prev, curr = curr, prev + curr
        if curr % 2 == 0:
            result += curr
    return result

print(sumOfEvenFib(10))
print(sumOfEvenFib(1000))
print(sumOfEvenFib(4000000))

'''
    Complexity Analysis

    Time: O(n) where n is how many numbers there is in the sequence below num
    Space: O(1) since we only created a couple of int variables
'''